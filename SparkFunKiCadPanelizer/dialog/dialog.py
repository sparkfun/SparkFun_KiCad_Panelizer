"""Subclass of dialog_text_base, which is generated by wxFormBuilder."""
from logging import exception
import os
import wx
import json
import sys

from . import dialog_text_base

_APP_NAME = "SparkFun KiCad Panelizer"

# sub folder for our resource files
_RESOURCE_DIRECTORY = os.path.join("..", "resource")

#https://stackoverflow.com/a/50914550
def resource_path(relative_path):
    """ Get absolute path to resource, works for dev and for PyInstaller """
    base_path = getattr(sys, '_MEIPASS', os.path.dirname(os.path.abspath(__file__)))
    return os.path.join(base_path, _RESOURCE_DIRECTORY, relative_path)

def get_version(rel_path: str) -> str:
    try: 
        with open(resource_path(rel_path), encoding='utf-8') as fp:
            for line in fp.read().splitlines():
                if line.startswith("__version__"):
                    delim = '"' if '"' in line else "'"
                    return line.split(delim)[1]
            raise RuntimeError("Unable to find version string.")
    except:
        raise RuntimeError("Unable to find _version.py.")

_APP_VERSION = get_version("_version.py")

def ParseFloat(InputString, DefaultValue=0.0):
    value = DefaultValue
    if InputString != "":
        try:
            value = float(InputString)
        except ValueError:
            print("Value not valid")
    return value

class Dialog(dialog_text_base.DIALOG_TEXT_BASE):

    # The names of the config items need to match the names in dialog_text_base minus the m_
    config_defaults = {
        'dimensionsInchesBtn': 'true',
        'dimensionsMmBtn': 'false',
        'panelSizeSmallerBtn': 'true',
        'panelSizeLargerBtn': 'false',
        'panelSizeXCtrl': '5.5',
        'panelSizeYCtrl': '7.5',
        'gapsVerticalCtrl': '0.0',
        'gapsHorizontalCtrl': '0.0',
        'removeRightVerticalCheck': 'false',
        'productionBordersCheck': 'false',
        'productionFiducialsCheck': 'false',
        'productionExposeCheck': 'false'
    }

    def __init__(self, parent, config, ordering, panelizer, func):
        dialog_text_base.DIALOG_TEXT_BASE.__init__(self, parent)
        
        # hack for some gtk themes that incorrectly calculate best size
        #best_size = self.BestSize
        #best_size.IncBy(dx=0, dy=30)
        #self.SetClientSize(best_size)

        self.config_file = config

        self.ordering_instructions = ordering

        self.panelizer = panelizer

        self.func = func

        self.error = None

        self.SetTitle(_APP_NAME + " - " + _APP_VERSION)
        
        self.loadConfig()

    def loadConfig(self):
        # Load up last sessions config
        params = self.config_defaults
        try:
            with open(self.config_file, 'r') as cf:
                json_params = json.load(cf)
            params.update(json_params)
        except Exception as e:
            # Don't throw exception if we can't load previous config
            pass

        self.LoadSettings(params)
        
    def saveConfig(self):
        try:
            with open(self.config_file, 'w') as cf:
                json.dump(self.CurrentSettings(), cf, indent=2)
        except Exception as e:
            # Don't throw exception if we can't save config
            pass
            
    def LoadSettings(self, params):
        for key,value in params.items():
            if key not in self.config_defaults.keys():
                continue
            if value is None:
                continue

            try:
                obj = getattr(self, "m_{}".format(key))
                if hasattr(obj, "SetValue"):
                    obj.SetValue(value)
                elif hasattr(obj, "SetStringSelection"):
                    obj.SetStringSelection(value)
                else:
                    raise Exception("Invalid item")  
            except Exception as e:
                pass
        return params

    def CurrentSettings(self):
        params = {}

        for item in self.config_defaults.keys():
            obj = getattr(self, "m_{}".format(item))
            if hasattr(obj, "GetValue"):
                params.update({item: obj.GetValue()})
            elif hasattr(obj, "GetStringSelection"):
                params.update({item: obj.GetStringSelection()})
            else:
                raise Exception("Invalid item")    
        return params

    def OnPanelizeClick(self, e):
        self.saveConfig()
        self.func(self, self.panelizer)

    def OnCancelClick(self, e):
        self.EndModal(wx.ID_CANCEL)     
